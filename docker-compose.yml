version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ems-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password_123
      MYSQL_DATABASE: EMS
      MYSQL_USER: ems_user
      MYSQL_PASSWORD: ems_password123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/db-commands:/docker-entrypoint-initdb.d
    networks:
      - ems-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "ems_user", "-pems_password123"]
      timeout: 20s
      retries: 10

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ems-backend
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Server=mysql;Port=3306;Database=EMS;Uid=ems_user;Pwd=ems_password123;SslMode=None;AllowPublicKeyRetrieval=True;
      - Jwt__Key=your-super-secret-jwt-key-here-make-it-long-and-random-for-production
      - Jwt__Issuer=http://localhost:5000
      - Jwt__Audience=http://localhost:3000
      - Jwt__ExpiryMinutes=60
    ports:
      - "5000:5000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ems-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ems-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ems-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: ems-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ems-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  ems-network:
    driver: bridge
